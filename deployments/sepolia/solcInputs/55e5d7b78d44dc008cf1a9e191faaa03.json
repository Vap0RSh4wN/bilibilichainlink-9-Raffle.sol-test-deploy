{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/**\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\n */\npragma solidity ^0.8.0;\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \"./AutomationCompatibleInterface.sol\";\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "contracts/Raffle.sol": {
      "content": "// This implements the Chainlink VRF Version 2 and ChainLink Keepers\r\n// Raffle\r\n// Enter the lottery (paying some amount)\r\n// Pick a random winner (verifiably random)\r\n// Winner to be selected every X minutes -> completly automate// Chainlink Oracle -> Randomness, Automated Execution (Chainlink Keepers)\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\n// based https://docs.chain.link/vrf/v2/subscription/examples/get-a-random-number\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\r\n\r\nerror Raffle__NotEnoughETHEntered();\r\nerror Raffle__TransferFailed();\r\nerror Raffle__NotOpen();\r\nerror Raffle__UpkeepNotNeeded(\r\n    uint256 currentBalance,\r\n    uint256 numPlayers,\r\n    uint256 raffleState\r\n);\r\n\r\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\r\n    /* Type declarations */\r\n    enum RaffleState {\r\n        OPEN,\r\n        CALCULATING\r\n    }\r\n\r\n    /* State Variables */\r\n    uint256 private immutable i_entranceFee; //既省gas，又保证不变\r\n    address payable[] private s_players;\r\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator; //定义接口用来获得COORDINATOR，可以在https://docs.chain.link/vrf/v2/subscription/examples/get-a-random-number看到\r\n    uint64 private immutable i_subscriptionId; //如下三个都是函数requestRandomWords的参数\r\n    bytes32 private immutable i_gasLane;\r\n    uint32 private immutable i_callbackGasLimit;\r\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\r\n    uint32 private constant NUM_WORDS = 1;\r\n\r\n    // Lottery Variables\r\n    address private s_recentWinner;\r\n    RaffleState private s_raffleState; //不设置成bool的意义在于，这样变量就可以保存pending，open，closed，calculating等多种state\r\n    uint256 private s_lastTimeStamp; //用来记录每一次的block.timestamp，这样就可以回溯并记录各个块之间的时间差\r\n    uint256 private immutable i_interval; //定义时间间隔\r\n\r\n    /* Events */\r\n    event RaffleEnter(address indexed player);\r\n    event RequestedRafflewinner(uint256 indexed requestId);\r\n    event WinnerPicked(address indexed winner);\r\n\r\n    //vrfCoordinatorV2(可以在node module/chainlink/src/v0.8/VRFConsumerBaseV2看构造函数参数) 这里是根据视频打的，可能是老版本的合约\r\n    // is the address of the contract that does the random number of verifications\r\n\r\n    constructor(\r\n        address vrfCoordinatorV2, //contract\r\n        uint256 entranceFee,\r\n        uint64 subscriptionId,\r\n        bytes32 gasLane, // keyHash\r\n        uint32 callbackGasLimit,\r\n        uint256 interval\r\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\r\n        //上面第二个括号里的参数是第一个括号里本合约构造函数的参数输入并传过去的\r\n        //也就是给父函数的构造函数也要传参，但是这个参没法直接传，要给子函数的构造函数先传值，再传给父函数的构造函数\r\n        i_entranceFee = entranceFee;\r\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\r\n        //相当于拿到了COORDINATOR，于‘docs.chain.link/vrf/v2/subscription/examples/get-a-random-number#:~:text=sender)%0A%20%20%20%20%7B-,COORDINATOR,-%3D%20VRFCoordinatorV2Interface(’\r\n\r\n        i_gasLane = gasLane;\r\n        i_subscriptionId = subscriptionId;\r\n        i_callbackGasLimit = callbackGasLimit;\r\n\r\n        s_raffleState = RaffleState.OPEN; //初始化状态为OPEN\r\n        s_lastTimeStamp = block.timestamp;\r\n        i_interval = interval;\r\n    }\r\n\r\n    function enterRaffle() public payable {\r\n        //玩家入场这个博彩游戏的函数\r\n        // require (msg.value > i entranceFee,\"Not enough ETH!\")\r\n        // 但是存储上述一长串string很消耗gas，所以这里选择存储error code\r\n        if (msg.value < i_entranceFee) {\r\n            revert Raffle__NotEnoughETHEntered();\r\n        } else if (s_raffleState != RaffleState.OPEN) {\r\n            //我们想让这函数只有在state是OPEN的时候才工作\r\n            revert Raffle__NotOpen();\r\n        }\r\n        s_players.push(payable(msg.sender));\r\n        emit RaffleEnter(msg.sender);\r\n    }\r\n\r\n    // Chainlink的随机数原理：\r\n    // Request the randgm number\r\n    // 0nce we get it, do something with it\r\n    // 2 transaction process\r\n\r\n    /**\r\n     * This is the function that the Chainlink Keeper nodes call\r\n     * they look for `upkeepNeeded` to return True.\r\n     * the following should be true for this to return true:\r\n     * 1. The time interval has passed between raffle runs.\r\n     * 2. The lottery is open, 最少一个player，并且有ETH.\r\n     * 3. The contract has ETH.\r\n     * 4. Implicity, your subscription is funded with LINK.感觉类似给钱才干活的意思\r\n     * 5. The lottery should be in an \"open\" state.\r\n     *\r\n     * Something that we want to avoid when we're waiting for a random number to return and when we've requested a random winner.\r\n     * We're technically in this weird limbo state where we're waiting for a random number to be returned\r\n     * and we really shouldn't allow any new players to join.\r\n     * So what we actually want to do is create some state variable telling us whether the lottery is open or not\r\n     * and what we're waiting for our random number to get back will be in a closed or calculating state.\r\n     */\r\n\r\n    //该函数改成public这样就可以用本合约调用该函数了。\r\n    function checkUpkeep(\r\n        //我们想让这函数只有在state是OPEN的时候才工作，所以在enterRaffle()里也做了限制\r\n        bytes memory /* checkData */\r\n    )\r\n        public\r\n        override\r\n        returns (bool upkeepNeeded, bytes memory /* performData */)\r\n    {\r\n        bool isOpen = RaffleState.OPEN == s_raffleState;\r\n        //1. The time interval has passed between raffle runs.\r\n        // 检查(block.timestamp - last block timestamp) > internal，但上一个块的时间戳我们没有，所以我们要创建一个state variable来记录\r\n        bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\r\n        //2.\r\n        bool hasPlayers = s_players.length > 0;\r\n        bool hasBalance = address(this).balance > 0;\r\n\r\n        // 如果upkeepNeeded返回true，意味着是时候得到一个新的随机数random number,end lottery\r\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\r\n        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.\r\n    }\r\n\r\n    //external 比 public省gas，因为own contract can't call this\r\n    function performUpkeep(bytes calldata /* performData */) external override {\r\n        // 之前是想调用VRF文档中requestRandomWords()函数，在keeper这里rename成了performUpkeep()\r\n        // requestId = COORDINATOR.requestRandomWords(//这个函数的参数说明都可以在https://docs.chain.link/vrf/v2/subscription/examples/get-a-random-number#:~:text=The%20parameters%20define,given%20_requestId.找到\r\n        //     keyHash, // bytes32 keyHash: The gas lane key hash value, which is the maximum gas price you are willing to pay for a request in wei. It functions as an ID of the off-chain VRF job that runs in response to requests.\r\n        //     s_subscriptionId, // uint64 s_subscriptionId: The subscription ID that this contract uses for funding requests.\r\n        //     requestConfirmations,\r\n        //     callbackGasLimit,\r\n        //     numWords\r\n        //在上面全部存为state variables\r\n\r\n        (bool upkeepNeeded, ) = checkUpkeep(\"\"); //空的calldata\r\n        if (!upkeepNeeded) {\r\n            revert Raffle__UpkeepNotNeeded(\r\n                address(this).balance,\r\n                s_players.length,\r\n                uint256(s_raffleState)\r\n            );\r\n        }\r\n        s_raffleState = RaffleState.CALCULATING; //有人正在请求，此时不允许别人进行请求\r\n        uint256 requestId = i_vrfCoordinator.requestRandomWords( // returns a uint256 request ID\r\n            i_gasLane,\r\n            i_subscriptionId,\r\n            REQUEST_CONFIRMATIONS,\r\n            i_callbackGasLimit,\r\n            NUM_WORDS\r\n        );\r\n        emit RequestedRafflewinner(requestId);\r\n    }\r\n\r\n    function fulfillRandomWords(\r\n        uint256 /*requestId,*/,\r\n        uint256[] memory randomWords //只有一个\r\n    ) internal override {\r\n        //VRFConsumerBaseV2.sol会知道要call这个function\r\n        // 它的产生随机数的原理：\r\n        // 给定一个想获得的随机数范围，比如s_playersize=10.\r\n        // 给定一个随机数，比如202.\r\n        // 202 % 10 = 2.\r\n        // 所以最终随机数为2.\r\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\r\n        address payable recentWinner = s_players[indexOfWinner];\r\n        s_recentWinner = recentWinner;\r\n        //我们从player里选出winner后，我们要重新设置player array\r\n        s_players = new address payable[](0);\r\n        //还要重新reset s_lastTimeStamp\r\n        s_lastTimeStamp = block.timestamp;\r\n        s_raffleState = RaffleState.OPEN; //完成了请求，重新改回状态，别也可以请求了\r\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\"\");\r\n        //require(success)\r\n        if (!success) {\r\n            revert Raffle__TransferFailed();\r\n        }\r\n        //接下来要通过emit event来track历史中的winner并保留记录\r\n        emit WinnerPicked(recentWinner);\r\n    }\r\n\r\n    /** Getter Functions */\r\n\r\n    function getRaffleState() public view returns (RaffleState) {\r\n        return s_raffleState;\r\n    }\r\n\r\n    function getNumWords() public pure returns (uint256) {\r\n        return NUM_WORDS; //这东西不是storage也不是链上数据，所以不用view用pure\r\n    }\r\n\r\n    function getRequestConfirmations() public pure returns (uint256) {\r\n        return REQUEST_CONFIRMATIONS;\r\n    }\r\n\r\n    function getRecentWinner() public view returns (address) {\r\n        return s_recentWinner;\r\n    }\r\n\r\n    function getPlayer(uint256 index) public view returns (address) {\r\n        return s_players[index];\r\n    }\r\n\r\n    function getLastTimeStamp() public view returns (uint256) {\r\n        return s_lastTimeStamp;\r\n    }\r\n\r\n    function getInterval() public view returns (uint256) {\r\n        return i_interval;\r\n    }\r\n\r\n    function getEntranceFee() public view returns (uint256) {\r\n        return i_entranceFee;\r\n    }\r\n\r\n    function getNumberOfPlayers() public view returns (uint256) {\r\n        return s_players.length;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}